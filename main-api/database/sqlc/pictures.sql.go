// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: pictures.sql

package db

import (
	"context"
	"database/sql"
)

const createPicture = `-- name: CreatePicture :one
INSERT INTO pictures (
  url,
  matches,
  rating
) VALUES (
  $1, $2, $3
) RETURNING id, description, user_id, url, matches, rating, created_at
`

type CreatePictureParams struct {
	Url     string `json:"url"`
	Matches int32  `json:"matches"`
	Rating  int32  `json:"rating"`
}

func (q *Queries) CreatePicture(ctx context.Context, arg CreatePictureParams) (Picture, error) {
	row := q.db.QueryRowContext(ctx, createPicture, arg.Url, arg.Matches, arg.Rating)
	var i Picture
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.UserID,
		&i.Url,
		&i.Matches,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const deletePicture = `-- name: DeletePicture :exec
DELETE FROM pictures
WHERE id = $1
`

func (q *Queries) DeletePicture(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePicture, id)
	return err
}

const getPicture = `-- name: GetPicture :one
SELECT id, description, user_id, url, matches, rating, created_at FROM pictures
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPicture(ctx context.Context, id int32) (Picture, error) {
	row := q.db.QueryRowContext(ctx, getPicture, id)
	var i Picture
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.UserID,
		&i.Url,
		&i.Matches,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const getRandomPair = `-- name: GetRandomPair :many
SELECT id, description, user_id, url, matches, rating, created_at FROM pictures
ORDER BY random()
LIMIT 2
`

func (q *Queries) GetRandomPair(ctx context.Context) ([]Picture, error) {
	rows, err := q.db.QueryContext(ctx, getRandomPair)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Picture
	for rows.Next() {
		var i Picture
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.UserID,
			&i.Url,
			&i.Matches,
			&i.Rating,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersPictures = `-- name: GetUsersPictures :many
SELECT id, description, user_id, url, matches, rating, created_at FROM pictures
WHERE user_id = $1 LIMIT 3
`

func (q *Queries) GetUsersPictures(ctx context.Context, userID sql.NullInt32) ([]Picture, error) {
	rows, err := q.db.QueryContext(ctx, getUsersPictures, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Picture
	for rows.Next() {
		var i Picture
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.UserID,
			&i.Url,
			&i.Matches,
			&i.Rating,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPictures = `-- name: ListPictures :many
SELECT id, description, user_id, url, matches, rating, created_at FROM pictures
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPicturesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPictures(ctx context.Context, arg ListPicturesParams) ([]Picture, error) {
	rows, err := q.db.QueryContext(ctx, listPictures, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Picture
	for rows.Next() {
		var i Picture
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.UserID,
			&i.Url,
			&i.Matches,
			&i.Rating,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePicture = `-- name: UpdatePicture :one
UPDATE pictures
SET rating = $2
WHERE id = $1
RETURNING id, description, user_id, url, matches, rating, created_at
`

type UpdatePictureParams struct {
	ID     int32 `json:"id"`
	Rating int32 `json:"rating"`
}

func (q *Queries) UpdatePicture(ctx context.Context, arg UpdatePictureParams) (Picture, error) {
	row := q.db.QueryRowContext(ctx, updatePicture, arg.ID, arg.Rating)
	var i Picture
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.UserID,
		&i.Url,
		&i.Matches,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}
